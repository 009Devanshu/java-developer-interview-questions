Need For Concurrent Collections
-------------------------------------------
1==>Traditional Collection objects (like ArrayList, HashMap etc) can be accessed by multiple threads simultaneously and there may be  a chance of data inconsistency problems and hence these are not thread safe.

==>Already existing thread safe collections (Vector, HashTable, synchronizedList(), synchronizedSet(), synchronizedMap()) are not upto the mark performance wise because for every operation, even for read operation totol collection object will be loaded by only one thread at a time and it increases waiting time of other threads.

==>Another big problem with traditional collections is while one thread iterating collection, the other threads are not allowed to modify Collection object simultaneously and if we are trying to modify them then we get ConcurrentModificationException.

=> Hence these traditional collection objects are not suitable for scalable multithreaded applications.
   To overcome these problems SUN people introduced Concurrent collection in 1.5 version. 
   

import java.util.ArrayList;
import java.util.Iterator;
public  class MyThread extends Thread{
	static ArrayList<String> l = new ArrayList<>();
	public void run() {
		try {
			Thread.sleep(2000);
			System.out.println("Chile Thread Updating List");
			l.add("d");
		}
		catch(InterruptedException e) {
		e.printStackTrace();
		}

	}
	public static void main(String[] args)throws InterruptedException {
		l.add("A");
		l.add("B");
		l.add("C");
		MyThread t = new MyThread();
		t.start();
		Iterator<String> itr = l.iterator();
		while(itr.hasNext()) {
		String s1 = itr.next();
		System.out.println("Main Thread Iterating List and current object is: "+s1);
		Thread.sleep(3000);
		}
		System.out.println(l);
	}
}

Output: 
Main Thread Iterating List and current object is: A

Chile Thread Updating List

Exception in thread "main" java.util.ConcurrentModificationException

	at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)

	at java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)

	at com.p1.MyThread.main(MyThread.java:28)

-----------------------------------------------------------------------------------------------------------------
	
Concurrent collections never throw ConcurrentModificationException.
The important concurrent classes are:
1. Concurrent HashMap
2. CopyOnWriteArrayList
3. CopyOnWriteArraySet


Concurrent HashMap

- Underlying data structure is Hashtable.
- To perform read operation Thread won't require any lock. But to perform update operation Thread requires lock but it is the lock of a particular part  (Bucket Level Lock)
- Concurrent update achieved by internally dividing Map into smaller portion which is defined by Concurrency level.
- The default concurrency level is 16.
- So, ConcurrentHashMap allows simultaneous read operation and simultaneously 16 write(update) operations.
- null is not allowed for keys and values.
- While one thread is iterating , other thread can perform update operation and ConcurrentHashMap never throws ConcurrentModificationException.
